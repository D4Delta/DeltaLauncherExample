/* 
    This file is part of DeltaLauncherExample.

    DeltaLauncher is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DeltaLauncherExample is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with DeltaLauncherExample.  If not, see <http://www.gnu.org/licenses/>.
*/
package fr.d4delta.launcher.example;

import fr.d4delta.launcher.Callback;
import fr.d4delta.launcher.Dependency;
import fr.d4delta.launcher.Launcher;
import fr.d4delta.launcher.NativeDependencyType;
import fr.d4delta.launcher.NativeHackException;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.net.URL;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jdom2.JDOMException;

/**
 *
 * @author d4delta
 */
public class MainFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        Dimension desktop = getToolkit().getScreenSize();
        setLocation(desktop.width / 2 - getWidth() / 2, desktop.height / 2 - getHeight() / 2);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        destinationButton = new javax.swing.JButton();
        destinationField = new javax.swing.JTextField();
        destinationLabel = new javax.swing.JLabel();
        destinationSeparator = new javax.swing.JSeparator();
        pomUrlLabel = new javax.swing.JLabel();
        urlField = new javax.swing.JTextField();
        launchButton = new javax.swing.JButton();
        urlSeparator = new javax.swing.JSeparator();
        loadingBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DeltaLauncher Example");

        destinationButton.setText("Choose destination folder...");
        destinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationButtonActionPerformed(evt);
            }
        });

        destinationLabel.setText("Destination folder:");

        pomUrlLabel.setText("Main pom url:");

        launchButton.setText("Launch");
        launchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchButtonActionPerformed(evt);
            }
        });

        loadingBar.setMaximum(1000);

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(destinationSeparator)
            .addComponent(urlSeparator)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(destinationField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(destinationLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pomUrlLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(urlField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(launchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadingBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(destinationButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(destinationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pomUrlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(launchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(urlSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    JFileChooser destinationChooser = new JFileChooser();
    {
        destinationChooser.setMultiSelectionEnabled(false);
        destinationChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }
    private void destinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationButtonActionPerformed
        if(destinationChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)  {
            destinationField.setText(destinationChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_destinationButtonActionPerformed

    private void launchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchButtonActionPerformed
        try {
            Launcher launcher = new Launcher(new File(destinationField.getText()), new URL(urlField.getText()).openStream(), new Callback() {
                
                @Override
                public void nativeHackError(NativeHackException exception) {
                    if(JOptionPane.showConfirmDialog(MainFrame.this, "Could not add native library path ! Should we abort ?") == JOptionPane.OK_OPTION) {
                        throw new RuntimeException(exception);
                    }
                }

                @Override
                public void extractException(Dependency dependency, URL remotePackURL, File extractFolder, IOException cause) {                                                           
                    if(JOptionPane.showConfirmDialog(MainFrame.this, "Could not extract " + dependency + " ! Should we abort ?") == JOptionPane.OK_OPTION) {
                        throw new RuntimeException(cause);
                    }
                }
                
                @Override
                public void dependencyUnavailableError(Dependency dependency) {
                    if(JOptionPane.showConfirmDialog(MainFrame.this, dependency + " is unavailable ! Should we abort ?") == JOptionPane.OK_OPTION) {
                        throw new RuntimeException("Stopped : " + dependency + " is unavaible.");
                    }
                }
                
                @Override
                public void downloadError(IOException cause, URL originURL, File destination) {
                    if(JOptionPane.showConfirmDialog(MainFrame.this, "Error while downloading " + originURL + " to " + destination + ". Should we abort ?") == JOptionPane.OK_OPTION) {
                        throw new RuntimeException(cause);
                    }
                }
                
                @Override
                public void pomLoadError(Dependency dependecy, Exception cause) {
                    if(JOptionPane.showConfirmDialog(MainFrame.this, "Error while reading pom of " + dependecy + " ("+dependecy.pom+")" + ". Should we abort ?") == JOptionPane.OK_OPTION) {
                        throw new RuntimeException(cause);
                    }
                }
                
                @Override
                public void mainClassInvocationError(Exception cause, String mainClass) {
                    popError("Exception on the main class:", cause);
                }
                
                @Override
                public void noMainClassError() {
                    JOptionPane.showMessageDialog(MainFrame.this, "The main class isn't defined ! Is \"delta.launcher.main\" defined in the property ?", "Main class undefined", JOptionPane.ERROR_MESSAGE);
                }

                @Override
                public void readyToLaunchNotification(String mainClassPath, Class mainClass, Method main) {
                    MainFrame.this.log.append(mainClassPath + " is ready to roll !" + System.lineSeparator());
                }

                @Override
                public void downloadStateNotification(URL origin, File destination, long fileSize, long downloaded) {
                    long perHundred = fileSize / downloaded * 1000;
                    MainFrame.this.loadingBar.setValue((int) perHundred);
                    MainFrame.this.log.append(origin + " > " + destination + " : " + perHundred / 10 + "%" + System.lineSeparator());
                } 

                @Override
                public void addingRepositoryNotification(String id, String url) {
                    MainFrame.this.log.append("Adding repository : " + id + " > " + url + System.lineSeparator());
                }

                @Override
                public String[] addingPropertyNotification(String key, String value) {
                    MainFrame.this.log.append("Adding property : " + key + " > " + value + System.lineSeparator());
                    return super.addingPropertyNotification(key, value);
                }

                @Override
                public void loadingDependencyNotification(Dependency dependency) {
                    MainFrame.this.log.append("Loading " + dependency + "..." + System.lineSeparator());
                }
                
                @Override
                public void dependencyJarNotification(Dependency notification) {
                    MainFrame.this.log.append(notification + " is a jar." + System.lineSeparator());
                }

                @Override
                public void dependencyNativeNotification(Dependency dependency) {
                    MainFrame.this.log.append(dependency + " is a native library." + System.lineSeparator());
                }
            });
            
            launcher.types.add(new NativeDependencyType());
            launcher.start();
            
        } catch (JDOMException ex) {
            popError("The main pom file is not a valid xml file:", ex);
        } catch (IOException ex) {
            popError("I/O Exception while reading main pom file:", ex);
        } catch (NativeHackException ex) {
            popError("Exception while instanciating NativeDepdencyType !", ex);
        }
    }//GEN-LAST:event_launchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    public void popError(String msg, Exception ex) {
        try(StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {
            ex.printStackTrace(pw);
            msg += System.lineSeparator() + sw.toString();
        } catch(IOException ioex) {
            msg += System.lineSeparator() + "CANNOT PRINT EXCEPTION";
        }
        JOptionPane.showMessageDialog(this, msg, "Error !", JOptionPane.ERROR_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton destinationButton;
    private javax.swing.JTextField destinationField;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JSeparator destinationSeparator;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton launchButton;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel pomUrlLabel;
    private javax.swing.JTextField urlField;
    private javax.swing.JSeparator urlSeparator;
    // End of variables declaration//GEN-END:variables
}
